from predict_model import model
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from states import States
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.types import Message
from aiogram.types import ReplyKeyboardMarkup
from aiogram.types import KeyboardButton
from aiogram import Bot, Dispatcher, types, executor

bot = Bot(token='5846028312:AAEipW2L_pJ7XgSM9Q7BPcTD7FWQXn87SWI')
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    inline_keyboard = types.InlineKeyboardMarkup()

    buttons = [
        types.InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∫–≤–∞—Ä—Ç–∏—Ä—ã", callback_data="predict"),
        types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"),
    ]
    inline_keyboard.add(*buttons)

    await message.answer("–ü—Ä–∏–≤–µ—Çüëã")
    await message.answer("–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É –∂–µ–ª–∞–µ–º–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã")
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)




@dp.callback_query_handler(text="predict")
async def predict(call: types.CallbackQuery):
    await call.message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ:")
    await call.message.answer("–ñ–µ–ª–∞–µ–º–∞—è –ø–ª–æ—â–∞–¥—å(–∫–≤.–º):")
    await States.get_area.set()

@dp.message_handler(state=States.get_area)
async def get_area(message: Message, state: FSMContext):
    area = message.text
    await state.update_data(
        {
            'area': area,
        }
    )
    await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ:')
    await States.next()

@dp.message_handler(state=States.get_floor_max)
async def get_floor_max(message: Message, state: FSMContext):
    floor_max = message.text
    await state.update_data(
        {
            'floor_max': floor_max,
        }
    )
    await message.answer('–≠—Ç–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã:')
    await States.next()

@dp.message_handler(state=States.get_floor)
async def get_floor(message: Message, state: FSMContext):
    floor = message.text
    await state.update_data(
        {
            'floor': floor,
        }
    )
    await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:')
    await States.next()

@dp.message_handler(state=States.get_rooms_count)
async def get_rooms_count(message: Message, state: FSMContext):
    rooms = message.text
    await state.update_data(
        {
            'rooms': rooms,
        }
    )

    buttons_type = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons_type.add(KeyboardButton('–õ–æ–¥–∂–∏—è'))
    buttons_type.add(KeyboardButton('–ë–∞–ª–∫–æ–Ω'))


    await message.answer('–õ–æ–¥–∂–∏—è –∏–ª–∏ –±–∞–ª–∫–æ–Ω:', reply_markup=buttons_type)

    await States.next()


@dp.message_handler(Text(equals="–ë–∞–ª–∫–æ–Ω"), state=States.get_extra_area_type_name)
async def get_extra_area_type_name(message: Message, state: FSMContext):
    type = message.text
    type = 0
    await state.update_data(
        {
            'type': type,
        }
    )
    buttons_water = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons_water.add(KeyboardButton('–ï—Å—Ç—å'))
    buttons_water.add(KeyboardButton('–ù–µ—Ç'))

    await message.answer('–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å:', reply_markup=types.ReplyKeyboardRemove())
    await message.answer('–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞?', reply_markup=buttons_water)
    await States.next()

@dp.message_handler(Text(equals="–õ–æ–¥–∂–∏—è"), state=States.get_extra_area_type_name)
async def get_extra_area_type_name(message: Message, state: FSMContext):
    type = message.text
    type = 1
    await state.update_data(
        {
            'type': type,
        }
    )
    buttons_water = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons_water.add(KeyboardButton('–ï—Å—Ç—å'))
    buttons_water.add(KeyboardButton('–ù–µ—Ç'))

    await message.answer('–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å:', reply_markup=types.ReplyKeyboardRemove())
    await message.answer('–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞?', reply_markup=buttons_water)
    await States.next()

@dp.message_handler(Text(equals="–ï—Å—Ç—å"), state=States.get_hot_water)
async def get_hot_water(message: Message, state: FSMContext):
    hot_water = message.text
    hot_water = 1
    await state.update_data(
        {
            'hot_water': hot_water,
        }
    )
    data = await state.get_data()

    await state.finish()
    result = model.predict([[int(data['area']), int(data['floor_max']), int(data['floor']), int(data['rooms']), int(data['type']), int(data['hot_water'])]])

    if int(data['type']) == 1:
        type = '–õ–æ–¥–∂–∏—è'
    else:
        type = '–ë–∞–ª–∫–æ–Ω'

    if int(data['hot_water']) == 1:
        water = '–ï—Å—Ç—å'
    else:
        water = '–ù–µ—Ç'

    await message.answer("–î–∞–Ω–Ω—ã–µ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ:", reply_markup=types.ReplyKeyboardRemove())
    await message.answer(f"–ü–ª–æ—â–∞–¥—å: {int(data['area'])} –∫–≤.–º\n"
                         f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ: {int(data['floor_max'])}\n"
                         f"–≠—Ç–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {int(data['floor'])}\n"
                         f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {int(data['rooms'])}\n"
                         f"–¢–∏–ø: {type}\n"
                         f"–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞: {water}\n")
    await bot.send_message(message.from_user.id, f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã:\n{int(round(result[0][0], 0))} —Ä—É–±–ª–µ–πüí∞üí∞üí∞")

@dp.message_handler(Text(equals="–ù–µ—Ç"), state=States.get_hot_water)
async def get_hot_water(message: Message, state: FSMContext):
    hot_water = message.text
    hot_water = 0
    await state.update_data(
        {
            'hot_water': hot_water,
        }
    )
    data = await state.get_data()

    await state.finish()
    result = model.predict([[int(data['area']), int(data['floor_max']), int(data['floor']), int(data['rooms']), int(data['type']), int(data['hot_water'])]])

    if int(data['type']) == 1:
        type = '–õ–æ–¥–∂–∏—è'
    else:
        type = '–ë–∞–ª–∫–æ–Ω'

    if int(data['hot_water']) == 1:
        water = '–ï—Å—Ç—å'
    else:
        water = '–ù–µ—Ç'

    await message.answer("–î–∞–Ω–Ω—ã–µ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ:", reply_markup=types.ReplyKeyboardRemove())
    await message.answer(f"–ü–ª–æ—â–∞–¥—å: {int(data['area'])} –∫–≤.–º\n"
                         f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ: {int(data['floor_max'])}\n"
                         f"–≠—Ç–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {int(data['floor'])}\n"
                         f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {int(data['rooms'])}\n"
                         f"–¢–∏–ø: {type}\n"
                         f"–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞: {water}\n")
    await bot.send_message(message.from_user.id, f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã:\n{int(round(result[0][0], 0))} —Ä—É–±–ª–µ–πüí∞üí∞üí∞")







executor.start_polling(dp, skip_updates=True)

